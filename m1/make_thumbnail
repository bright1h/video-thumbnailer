#!/usr/bin/env python3

from moviepy.editor import VideoFileClip
import logging
import json
import uuid
import redis
import os
import requests
from hashlib import md5

BASE_URL = "http://webapp:8080"

LOG = logging
REDIS_QUEUE_LOCATION = os.getenv('REDIS_QUEUE', 'localhost')
QUEUE_NAME = 'queue:thumbnail'

INSTANCE_NAME = uuid.uuid4().hex

LOG.basicConfig(
    level=LOG.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

DIR = os.getcwd() + "/tmp/"


def download_file_and_post_to_queue(log, bucket, object, path):
    url = "{}/{}/{}".format(BASE_URL, bucket, object)
    r = requests.get(url, allow_redirects=True)
    log.info("Download Status Code : %d",r.status_code)
    if r.status_code == 200:
        if not os.path.exists(path):
            os.makedirs(path)
        open(path + object, 'wb').write(r.content)

    return r.status_code


def watch_queue(redis_conn, queue_name, callback_func, timeout=30):
    """
    Listen to Redis
    """
    active = True

    while active:
        # Fetch a json-encoded task using a blocking (left) pop
        # queue_name implied keys in the list
        packed = redis_conn.blpop([queue_name], timeout=timeout)

        if not packed:
            # if nothing is returned, poll a again
            continue

        _, packed_task = packed

        # If it's treated to a poison pill, quit the loop
        if packed_task == b'DIE':
            active = False
        else:
            task = None
            try:
                task = json.loads(packed_task)
            except Exception:
                LOG.exception('json.loads failed')
            if task:
                callback_func(task)


def get_md5(file):
    hash_md5 = md5()
    with open(file, "rb") as f:
        for chunk in iter(lambda: f.read(4096), b""):
            hash_md5.update(chunk)
    return hash_md5.hexdigest()


def upload_gif(log, bucket, path, uploaded_file):
    log.info("Upload %s", uploaded_file)

    r_create = requests.post("{}/{}/{}?create".format(BASE_URL, bucket, uploaded_file))
    if r_create.status_code != 200:
        log.info("Fail to create ticket, status : %d", r_create.status_code)
        return

    files = open(path + uploaded_file, "rb")
    gif_md5 = get_md5(path + uploaded_file)
    file_size = os.fstat(files.fileno()).st_size
    headers = {
        "content-MD5": gif_md5,
        "content-length": str(file_size),
    }
    r_upload = requests.put("{}/{}/{}?partNumber=1".format(BASE_URL, bucket, uploaded_file), data=files,
                            headers=headers)
    if r_upload.status_code != 200:
        log.info("Fail to upload a file, status : %d %s", r_upload.status_code, r_upload.text)
        return
    files.close()

    r_complete = requests.post("{}/{}/{}?complete".format(BASE_URL, bucket, uploaded_file))

    if r_complete.status_code != 200:
        log.info("Fail to complete the uploaded object, status : %d", r_complete.status_code)
        return

    log.info("Done, %s is uploaded, status : 200", uploaded_file)


def make_gif(log, task):
    """
    Convert the video file to the gif image
    """
    bucket = task.get('bucket')
    fname = task.get('fname')
    output = fname.replace('.mp4', '.gif')
    path = DIR + bucket + '/'
    download_vid_status = download_file_and_post_to_queue(log, bucket, fname, path)

    try:
        if download_vid_status == 200:
            log.info('Convert %s to GIF image', fname)
            vid = VideoFileClip(path + fname)
            duration = vid.duration
            start = duration * 2 / 3
            if duration < 5:
                start = duration
            if duration - start < 5:
                start = duration - 5
            clip = vid.subclip(start, start + 5).resize((320, 240))
            clip.write_gif(path + output, fps=10)
            log.info("Done, %s, path: %s", output, path)
            upload_gif(log, bucket, path, output)
    except OSError:
        log.info('Error : cannot find the video file')


def main():
    LOG.info('Starting a worker...')
    LOG.info('Unique name: %s', INSTANCE_NAME)
    host, *port_info = REDIS_QUEUE_LOCATION.split(':')
    port = tuple()
    if port_info:
        port, *_ = port_info
        port = (int(port),)

    named_logging = LOG.getLogger(name=INSTANCE_NAME)
    named_logging.info('Trying to connect to %s [%s]', host, REDIS_QUEUE_LOCATION)
    redis_conn = redis.Redis(host=host, *port)
    watch_queue(
        redis_conn,
        QUEUE_NAME,
        lambda task_descr: make_gif(named_logging, task_descr))


if __name__ == '__main__':
    main()
